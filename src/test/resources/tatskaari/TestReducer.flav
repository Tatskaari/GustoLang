function add(a : number, b : number) : integer do
  return a + b
end

(* This is a comment that has
no bearing on the code *)

function mul(a : number, b : number) : integer do
  return a * b
end

function reduce(start : number, myList : integer list, reducer : (integer, integer) -> integer) : integer do
  val total : integer := start

  val n : integer := 0
  val next : integer := myList[n]

  while(next != -1) do
    total := reducer(total, next)
    n := n + 1
    next := myList[n]
  end

  return total
end

val myList : integer list := [1, 2, 3, 4, -1]
val addRes : integer := reduce(0, myList, add)
val mulRes : integer := reduce(1, myList, mul)
